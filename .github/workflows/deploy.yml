name: Deploy
on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  APP_NAME: demo-version-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push (latest + sha tag)
        id: buildpush
        uses: docker/build-push-action@v6
        with:
            context: .
            push: true
            tags: |
              ${{ secrets.DOCKERHUB_USERNAME }}/demo_version:latest
              ${{ secrets.DOCKERHUB_USERNAME }}/demo_version:sha-${{ github.sha }}
            build-args: |
              BUILD_SHA=${{ github.sha }}
              BUILD_TIME=${{ github.event.head_commit.timestamp }}
            provenance: false




      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Get EC2 Instance
        id: ec2
        run: |
          IID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ env.APP_NAME }}" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          IP=$(aws ec2 describe-instances --instance-ids "$IID" \
            --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "iid=$IID" >> $GITHUB_OUTPUT
          echo "ip=$IP"  >> $GITHUB_OUTPUT

      - name: Prepare release manifest
        id: manifest
        run: |
          TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          SHORT=${GITHUB_SHA::7}
          SHA_TAG="sha-${GITHUB_SHA}"
          cat > manifest.json <<JSON
          { "app":"${{ env.APP_NAME }}",
            "image":"${{ secrets.DOCKERHUB_USERNAME }}/demo_version:${SHA_TAG}",
            "git":{"sha":"${GITHUB_SHA}","short":"${SHORT}","run_url":"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"},
            "deployed_at":"${TS}",
            "instance_id":"${{ steps.ec2.outputs.iid }}",
            "public_ip":"${{ steps.ec2.outputs.ip }}" }
          JSON
          cat manifest.json
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "date=$(date -u +%F)" >> $GITHUB_OUTPUT

      - name: Save manifest to S3 (current + dated + previous)
        run: |
          aws s3 cp s3://${{ secrets.S3_RELEASE_BUCKET }}/releases/current.json previous.json || echo '{}' > previous.json
          aws s3 cp previous.json s3://${{ secrets.S3_RELEASE_BUCKET }}/releases/previous.json
          aws s3 cp manifest.json s3://${{ secrets.S3_RELEASE_BUCKET }}/releases/current.json
          aws s3 cp manifest.json s3://${{ secrets.S3_RELEASE_BUCKET }}/releases/${{ steps.manifest.outputs.date }}/${{ github.sha }}.json
          aws s3 ls s3://${{ secrets.S3_RELEASE_BUCKET }}/releases/

      - name: Deploy via SSM (pull sha tag and restart)
        run: |
          aws ssm send-command \
            --instance-ids "${{ steps.ec2.outputs.iid }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands='[
              "docker rm -f demo-version-app || true",
              "docker pull '"${{ secrets.DOCKERHUB_USERNAME }}"'/demo_version:${{ steps.manifest.outputs.sha_tag }}",
              "docker run -d --name demo-version-app -e NODE_ENV=production -e SERVE_BUILD=true -e PORT=4000 -p 80:4000 --restart unless-stopped '"${{ secrets.DOCKERHUB_USERNAME }}"'/demo_version:${{ steps.manifest.outputs.sha_tag }}",
              "docker ps"
            ]'

      - name: Smoke test (retry)
        run: |
          set -e
          for i in {1..30}; do
            curl -fsS http://${{ steps.ec2.outputs.ip }}/api/ping && break
            sleep 2
          done
          curl -fsS http://${{ steps.ec2.outputs.ip }}/ | head -n 1
